+ACM vim:fileencoding+AD0-utf-7:ft+AD0-conf:foldmethod+AD0-marker

+ACM: Fonts +AHsAewB7

+ACM: kitty has very powerful font management. You can configure
+ACM: individual font faces and even specify special fonts for particular
+ACM: characters.

+ACM font+AF8-family      Source Code Pro Mono
+ACM bold+AF8-font        Source Code Pro Mono Bold
+ACM italic+AF8-font      Source Code Pro Mono Italic

font+AF8-family      Liberation Mono
bold+AF8-font        Liberation Mono Bold
italic+AF8-font      Liberation Mono Italic

+ACM font+AF8-family      JetBrains Mono SemiBold
+ACM bold+AF8-font        JetBrains Mono ExtraBold
+ACM italic+AF8-font      JetBrains Mono Italic
+ACM
+ACM bold+AF8-font        auto
+ACM italic+AF8-font      auto
+ACM bold+AF8-italic+AF8-font auto

+ACM: You can specify different fonts for the bold/italic/bold-italic
+ACM: variants. To get a full list of supported fonts use the +AGA-kitty
+ACM: list-fonts+AGA command. By default they are derived automatically, by
+ACM: the OSes font system. Setting them manually is useful for font
+ACM: families that have many weight variants like Book, Medium, Thick,
+ACM: etc. For example::

+ACM:     font+AF8-family      Operator Mono Book
+ACM:     bold+AF8-font        Operator Mono Medium
+ACM:     italic+AF8-font      Operator Mono Book Italic
+ACM:     bold+AF8-italic+AF8-font Operator Mono Medium Italic

font+AF8-size 16.0

+ACM: Font size (in pts)

+ACM force+AF8-ltr no

+ACM: kitty does not support BIDI (bidirectional text), however, for RTL
+ACM: scripts, words are automatically displayed in RTL. That is to say,
+ACM: in an RTL script, the words +ACI-HELLO WORLD+ACI display in kitty as
+ACM: +ACI-WORLD HELLO+ACI, and if you try to select a substring of an RTL-
+ACM: shaped string, you will get the character that would be there had
+ACM: the the string been LTR. For example, assuming the Hebrew word
+ACM: +BdkF6AXVBekF3AXZBd0, selecting the character that on the screen appears to be +Bd0
+ACM: actually writes into the selection buffer the character +Bdk.

+ACM: kitty's default behavior is useful in conjunction with a filter to
+ACM: reverse the word order, however, if you wish to manipulate RTL
+ACM: glyphs, it can be very challenging to work with, so this option is
+ACM: provided to turn it off. Furthermore, this option can be used with
+ACM: the command line program GNU FriBidi
+ACM: +ADw-https://github.com/fribidi/fribidi+ACM-executable+AD4 to get BIDI
+ACM: support, because it will force kitty to always treat the text as
+ACM: LTR, which FriBidi expects for terminals.

adjust+AF8-line+AF8-height  3
adjust+AF8-column+AF8-width 0

+ACM: Change the size of each character cell kitty renders. You can use
+ACM: either numbers, which are interpreted as pixels or percentages
+ACM: (number followed by +ACU), which are interpreted as percentages of the
+ACM: unmodified values. You can use negative pixels or percentages less
+ACM: than 100+ACU to reduce sizes (but this might cause rendering
+ACM: artifacts).

+ACM symbol+AF8-map U+-E0A0-U+-E0A3,U+-E0C0-U+-E0C7 PowerlineSymbols

+ACM: Map the specified unicode codepoints to a particular font. Useful
+ACM: if you need special rendering for some symbols, such as for
+ACM: Powerline. Avoids the need for patched fonts. Each unicode code
+ACM: point is specified in the form U+-+ADw-code point in hexadecimal+AD4. You
+ACM: can specify multiple code points, separated by commas and ranges
+ACM: separated by hyphens. symbol+AF8-map itself can be specified multiple
+ACM: times. Syntax is::

+ACM:     symbol+AF8-map codepoints Font Family Name

+ACM disable+AF8-ligatures never

+ACM: Choose how you want to handle multi-character ligatures. The
+ACM: default is to always render them.  You can tell kitty to not render
+ACM: them when the cursor is over them by using cursor to make editing
+ACM: easier, or have kitty never render them at all by using always, if
+ACM: you don't like them. The ligature strategy can be set per-window
+ACM: either using the kitty remote control facility or by defining
+ACM: shortcuts for it in kitty.conf, for example::

+ACM:     map alt+-1 disable+AF8-ligatures+AF8-in active always
+ACM:     map alt+-2 disable+AF8-ligatures+AF8-in all never
+ACM:     map alt+-3 disable+AF8-ligatures+AF8-in tab cursor

+ACM: Note that this refers to programming ligatures, typically
+ACM: implemented using the calt OpenType feature. For disabling general
+ACM: ligatures, use the font+AF8-features setting.

+ACM font+AF8-features none

+ACM: Choose exactly which OpenType features to enable or disable. This
+ACM: is useful as some fonts might have features worthwhile in a
+ACM: terminal. For example, Fira Code Retina includes a discretionary
+ACM: feature, zero, which in that font changes the appearance of the
+ACM: zero (0), to make it more easily distinguishable from +ANg. Fira Code
+ACM: Retina also includes other discretionary features known as
+ACM: Stylistic Sets which have the tags ss01 through ss20.

+ACM: Note that this code is indexed by PostScript name, and not the font
+ACM: family. This allows you to define very precise feature settings+ADs
+ACM: e.g. you can disable a feature in the italic font but not in the
+ACM: regular font.

+ACM: On Linux, these are read from the FontConfig database first and
+ACM: then this, setting is applied, so they can be configured in a
+ACM: single, central place.

+ACM: To get the PostScript name for a font, use kitty +- list-fonts
+ACM: --psnames:

+ACM: .. code-block:: sh

+ACM:     +ACQ kitty +- list-fonts --psnames +AHw grep Fira
+ACM:     Fira Code
+ACM:     Fira Code Bold (FiraCode-Bold)
+ACM:     Fira Code Light (FiraCode-Light)
+ACM:     Fira Code Medium (FiraCode-Medium)
+ACM:     Fira Code Regular (FiraCode-Regular)
+ACM:     Fira Code Retina (FiraCode-Retina)

+ACM: The part in brackets is the PostScript name.

+ACM: Enable alternate zero and oldstyle numerals::

+ACM:     font+AF8-features FiraCode-Retina +-zero +-onum

+ACM: Enable only alternate zero::

+ACM:     font+AF8-features FiraCode-Retina +-zero

+ACM: Disable the normal ligatures, but keep the calt feature which (in
+ACM: this font) breaks up monotony::

+ACM:     font+AF8-features TT2020StyleB-Regular -liga +-calt

+ACM: In conjunction with force+AF8-ltr, you may want to disable Arabic
+ACM: shaping entirely, and only look at their isolated forms if they
+ACM: show up in a document. You can do this with e.g.::

+ACM:     font+AF8-features UnifontMedium +-isol -medi -fina -init

+ACM box+AF8-drawing+AF8-scale 0.001, 1, 1.5, 2

+ACM: Change the sizes of the lines used for the box drawing unicode
+ACM: characters These values are in pts. They will be scaled by the
+ACM: monitor DPI to arrive at a pixel value. There must be four values
+ACM: corresponding to thin, normal, thick, and very thick lines.

+ACM: +AH0AfQB9

+ACM: Cursor customization +AHsAewB7

+ACM cursor +ACM-cccccc

+ACM: Default cursor color

+ACM cursor+AF8-text+AF8-color +ACM-111111

+ACM: Choose the color of text under the cursor. If you want it rendered
+ACM: with the background color of the cell underneath instead, use the
+ACM: special keyword: background

+ACM cursor+AF8-shape block

+ACM: The cursor shape can be one of (block, beam, underline)

+ACM cursor+AF8-beam+AF8-thickness 1.5

+ACM: Defines the thickness of the beam cursor (in pts)

+ACM cursor+AF8-underline+AF8-thickness 2.0

+ACM: Defines the thickness of the underline cursor (in pts)

+ACM cursor+AF8-blink+AF8-interval -1

+ACM: The interval (in seconds) at which to blink the cursor. Set to zero
+ACM: to disable blinking. Negative values mean use system default. Note
+ACM: that numbers smaller than repaint+AF8-delay will be limited to
+ACM: repaint+AF8-delay.

+ACM cursor+AF8-stop+AF8-blinking+AF8-after 15.0

+ACM: Stop blinking cursor after the specified number of seconds of
+ACM: keyboard inactivity.  Set to zero to never stop blinking.

+ACM: +AH0AfQB9

+ACM: Scrollback +AHsAewB7

scrollback+AF8-lines 5000

+ACM: Number of lines of history to keep in memory for scrolling back.
+ACM: Memory is allocated on demand. Negative numbers are (effectively)
+ACM: infinite scrollback. Note that using very large scrollback is not
+ACM: recommended as it can slow down performance of the terminal and
+ACM: also use large amounts of RAM. Instead, consider using
+ACM: scrollback+AF8-pager+AF8-history+AF8-size.

+ACM scrollback+AF8-pager less --chop-long-lines --RAW-CONTROL-CHARS +-INPUT+AF8-LINE+AF8-NUMBER

+ACM: Program with which to view scrollback in a new window. The
+ACM: scrollback buffer is passed as STDIN to this program. If you change
+ACM: it, make sure the program you use can handle ANSI escape sequences
+ACM: for colors and text formatting. INPUT+AF8-LINE+AF8-NUMBER in the command
+ACM: line above will be replaced by an integer representing which line
+ACM: should be at the top of the screen. Similarly CURSOR+AF8-LINE and
+ACM: CURSOR+AF8-COLUMN will be replaced by the current cursor position.

+ACM scrollback+AF8-pager+AF8-history+AF8-size 0

+ACM: Separate scrollback history size, used only for browsing the
+ACM: scrollback buffer (in MB). This separate buffer is not available
+ACM: for interactive scrolling but will be piped to the pager program
+ACM: when viewing scrollback buffer in a separate window. The current
+ACM: implementation stores the data in UTF-8, so approximatively 10000
+ACM: lines per megabyte at 100 chars per line, for pure ASCII text,
+ACM: unformatted text. A value of zero or less disables this feature.
+ACM: The maximum allowed size is 4GB.

+ACM wheel+AF8-scroll+AF8-multiplier 5.0

+ACM: Modify the amount scrolled by the mouse wheel. Note this is only
+ACM: used for low precision scrolling devices, not for high precision
+ACM: scrolling on platforms such as macOS and Wayland. Use negative
+ACM: numbers to change scroll direction.

+ACM touch+AF8-scroll+AF8-multiplier 1.0

+ACM: Modify the amount scrolled by a touchpad. Note this is only used
+ACM: for high precision scrolling devices on platforms such as macOS and
+ACM: Wayland. Use negative numbers to change scroll direction.

+ACM: +AH0AfQB9

+ACM: Mouse +AHsAewB7

+ACM mouse+AF8-hide+AF8-wait 3.0

+ACM: Hide mouse cursor after the specified number of seconds of the
+ACM: mouse not being used. Set to zero to disable mouse cursor hiding.
+ACM: Set to a negative value to hide the mouse cursor immediately when
+ACM: typing text. Disabled by default on macOS as getting it to work
+ACM: robustly with the ever-changing sea of bugs that is Cocoa is too
+ACM: much effort.

+ACM url+AF8-color +ACM-0087bd
+ACM url+AF8-style curly

+ACM: The color and style for highlighting URLs on mouse-over. url+AF8-style
+ACM: can be one of: none, single, double, curly

+ACM open+AF8-url+AF8-modifiers kitty+AF8-mod

+ACM: The modifier keys to press when clicking with the mouse on URLs to
+ACM: open the URL

+ACM open+AF8-url+AF8-with default
open+AF8-url+AF8-with firefox

+ACM: The program with which to open URLs that are clicked on. The
+ACM: special value default means to use the operating system's default
+ACM: URL handler.

+ACM url+AF8-prefixes http https file ftp

+ACM: The set of URL prefixes to look for when detecting a URL under the
+ACM: mouse cursor.

+ACM detect+AF8-urls yes

+ACM: Detect URLs under the mouse. Detected URLs are highlighted with an
+ACM: underline and the mouse cursor becomes a hand over them. Even if
+ACM: this option is disabled, URLs are still clickable.

+ACM copy+AF8-on+AF8-select no

+ACM: Copy to clipboard or a private buffer on select. With this set to
+ACM: clipboard, simply selecting text with the mouse will cause the text
+ACM: to be copied to clipboard. Useful on platforms such as macOS that
+ACM: do not have the concept of primary selections. You can instead
+ACM: specify a name such as a1 to copy to a private kitty buffer
+ACM: instead. Map a shortcut with the paste+AF8-from+AF8-buffer action to paste
+ACM: from this private buffer. For example::

+ACM:     map cmd+-shift+-v paste+AF8-from+AF8-buffer a1

+ACM: Note that copying to the clipboard is a security risk, as all
+ACM: programs, including websites open in your browser can read the
+ACM: contents of the system clipboard.

+ACM strip+AF8-trailing+AF8-spaces never

+ACM: Remove spaces at the end of lines when copying to clipboard. A
+ACM: value of smart will do it when using normal selections, but not
+ACM: rectangle selections. always will always do it.

+ACM rectangle+AF8-select+AF8-modifiers ctrl+-alt

+ACM: The modifiers to use rectangular selection (i.e. to select text in
+ACM: a rectangular block with the mouse)

+ACM terminal+AF8-select+AF8-modifiers shift

+ACM: The modifiers to override mouse selection even when a terminal
+ACM: application has grabbed the mouse

+ACM select+AF8-by+AF8-word+AF8-characters +AEA--./+AF8Afg?+ACYAPQAlACsAIw

+ACM: Characters considered part of a word when double clicking. In
+ACM: addition to these characters any character that is marked as an
+ACM: alphanumeric character in the unicode database will be matched.

+ACM click+AF8-interval -1.0

+ACM: The interval between successive clicks to detect double/triple
+ACM: clicks (in seconds). Negative numbers will use the system default
+ACM: instead, if available, or fallback to 0.5.

+ACM focus+AF8-follows+AF8-mouse no

+ACM: Set the active window to the window under the mouse when moving the
+ACM: mouse around

+ACM pointer+AF8-shape+AF8-when+AF8-grabbed arrow

+ACM: The shape of the mouse pointer when the program running in the
+ACM: terminal grabs the mouse. Valid values are: arrow, beam and hand

+ACM default+AF8-pointer+AF8-shape beam

+ACM: The default shape of the mouse pointer. Valid values are: arrow,
+ACM: beam and hand

+ACM pointer+AF8-shape+AF8-when+AF8-dragging beam

+ACM: The default shape of the mouse pointer when dragging across text.
+ACM: Valid values are: arrow, beam and hand

+ACM: +AH0AfQB9

+ACM: Performance tuning +AHsAewB7

+ACM repaint+AF8-delay 10

+ACM: Delay (in milliseconds) between screen updates. Decreasing it,
+ACM: increases frames-per-second (FPS) at the cost of more CPU usage.
+ACM: The default value yields +AH4-100 FPS which is more than sufficient for
+ACM: most uses. Note that to actually achieve 100 FPS you have to either
+ACM: set sync+AF8-to+AF8-monitor to no or use a monitor with a high refresh
+ACM: rate. Also, to minimize latency when there is pending input to be
+ACM: processed, repaint+AF8-delay is ignored.

+ACM input+AF8-delay 3

+ACM: Delay (in milliseconds) before input from the program running in
+ACM: the terminal is processed. Note that decreasing it will increase
+ACM: responsiveness, but also increase CPU usage and might cause flicker
+ACM: in full screen programs that redraw the entire screen on each loop,
+ACM: because kitty is so fast that partial screen updates will be drawn.

+ACM sync+AF8-to+AF8-monitor yes

+ACM: Sync screen updates to the refresh rate of the monitor. This
+ACM: prevents tearing (https://en.wikipedia.org/wiki/Screen+AF8-tearing)
+ACM: when scrolling. However, it limits the rendering speed to the
+ACM: refresh rate of your monitor. With a very high speed mouse/high
+ACM: keyboard repeat rate, you may notice some slight input latency. If
+ACM: so, set this to no.

+ACM: +AH0AfQB9

+ACM: Terminal bell +AHsAewB7

enable+AF8-audio+AF8-bell no

+ACM: Enable/disable the audio bell. Useful in environments that require
+ACM: silence.

+ACM visual+AF8-bell+AF8-duration 0.0

+ACM: Visual bell duration. Flash the screen when a bell occurs for the
+ACM: specified number of seconds. Set to zero to disable.

+ACM window+AF8-alert+AF8-on+AF8-bell yes

+ACM: Request window attention on bell. Makes the dock icon bounce on
+ACM: macOS or the taskbar flash on linux.

+ACM bell+AF8-on+AF8-tab yes

+ACM: Show a bell symbol on the tab if a bell occurs in one of the
+ACM: windows in the tab and the window is not the currently focused
+ACM: window

+ACM command+AF8-on+AF8-bell none

+ACM: Program to run when a bell occurs.

+ACM: +AH0AfQB9

+ACM: Window layout +AHsAewB7

+ACM remember+AF8-window+AF8-size  yes
+ACM initial+AF8-window+AF8-width  640
+ACM initial+AF8-window+AF8-height 400

+ACM: If enabled, the window size will be remembered so that new
+ACM: instances of kitty will have the same size as the previous
+ACM: instance. If disabled, the window will initially have size
+ACM: configured by initial+AF8-window+AF8-width/height, in pixels. You can use a
+ACM: suffix of +ACI-c+ACI on the width/height values to have them interpreted
+ACM: as number of cells instead of pixels.

+ACM enabled+AF8-layouts +ACo

+ACM: The enabled window layouts. A comma separated list of layout names.
+ACM: The special value all means all layouts. The first listed layout
+ACM: will be used as the startup layout. Default configuration is all
+ACM: layouts in alphabetical order. For a list of available layouts, see
+ACM: the https://sw.kovidgoyal.net/kitty/index.html+ACM-layouts.

+ACM window+AF8-resize+AF8-step+AF8-cells 2
+ACM window+AF8-resize+AF8-step+AF8-lines 2

+ACM: The step size (in units of cell width/cell height) to use when
+ACM: resizing windows. The cells value is used for horizontal resizing
+ACM: and the lines value for vertical resizing.

+ACM window+AF8-border+AF8-width 0.5pt

+ACM: The width of window borders. Can be either in pixels (px) or pts
+ACM: (pt). Values in pts will be rounded to the nearest number of pixels
+ACM: based on screen resolution. If not specified the unit is assumed to
+ACM: be pts. Note that borders are displayed only when more than one
+ACM: window is visible. They are meant to separate multiple windows.

+ACM draw+AF8-minimal+AF8-borders yes

+ACM: Draw only the minimum borders needed. This means that only the
+ACM: minimum needed borders for inactive windows are drawn. That is only
+ACM: the borders that separate the inactive window from a neighbor. Note
+ACM: that setting a non-zero window margin overrides this and causes all
+ACM: borders to be drawn.

+ACM window+AF8-margin+AF8-width 0

+ACM: The window margin (in pts) (blank area outside the border). A
+ACM: single value sets all four sides. Two values set the vertical and
+ACM: horizontal sides. Three values set top, horizontal and bottom. Four
+ACM: values set top, right, bottom and left.

+ACM single+AF8-window+AF8-margin+AF8-width -1

+ACM: The window margin (in pts) to use when only a single window is
+ACM: visible. Negative values will cause the value of
+ACM: window+AF8-margin+AF8-width to be used instead. A single value sets all
+ACM: four sides. Two values set the vertical and horizontal sides. Three
+ACM: values set top, horizontal and bottom. Four values set top, right,
+ACM: bottom and left.

+ACM window+AF8-padding+AF8-width 0

+ACM: The window padding (in pts) (blank area between the text and the
+ACM: window border). A single value sets all four sides. Two values set
+ACM: the vertical and horizontal sides. Three values set top, horizontal
+ACM: and bottom. Four values set top, right, bottom and left.

+ACM placement+AF8-strategy center

+ACM: When the window size is not an exact multiple of the cell size, the
+ACM: cell area of the terminal window will have some extra padding on
+ACM: the sides. You can control how that padding is distributed with
+ACM: this option. Using a value of center means the cell area will be
+ACM: placed centrally. A value of top-left means the padding will be on
+ACM: only the bottom and right edges.

+ACM active+AF8-border+AF8-color +ACM-00ff00

+ACM: The color for the border of the active window. Set this to none to
+ACM: not draw borders around the active window.

+ACM inactive+AF8-border+AF8-color +ACM-cccccc

+ACM: The color for the border of inactive windows

+ACM bell+AF8-border+AF8-color +ACM-ff5a00

+ACM: The color for the border of inactive windows in which a bell has
+ACM: occurred

+ACM inactive+AF8-text+AF8-alpha 1.0

+ACM: Fade the text in inactive windows by the specified amount (a number
+ACM: between zero and one, with zero being fully faded).

+ACM hide+AF8-window+AF8-decorations no

+ACM: Hide the window decorations (title-bar and window borders) with
+ACM: yes. On macOS, titlebar-only can be used to only hide the titlebar.
+ACM: Whether this works and exactly what effect it has depends on the
+ACM: window manager/operating system.

+ACM resize+AF8-debounce+AF8-time 0.1

+ACM: The time (in seconds) to wait before redrawing the screen when a
+ACM: resize event is received. On platforms such as macOS, where the
+ACM: operating system sends events corresponding to the start and end of
+ACM: a resize, this number is ignored.

+ACM resize+AF8-draw+AF8-strategy static

+ACM: Choose how kitty draws a window while a resize is in progress. A
+ACM: value of static means draw the current window contents, mostly
+ACM: unchanged. A value of scale means draw the current window contents
+ACM: scaled. A value of blank means draw a blank window. A value of size
+ACM: means show the window size in cells.

+ACM resize+AF8-in+AF8-steps no

+ACM: Resize the OS window in steps as large as the cells, instead of
+ACM: with the usual pixel accuracy. Combined with an
+ACM: initial+AF8-window+AF8-width and initial+AF8-window+AF8-height in number of cells,
+ACM: this option can be used to keep the margins as small as possible
+ACM: when resizing the OS window. Note that this does not currently work
+ACM: on Wayland.

+ACM confirm+AF8-os+AF8-window+AF8-close 0

+ACM: Ask for confirmation when closing an OS window or a tab that has at
+ACM: least this number of kitty windows in it. A value of zero disables
+ACM: confirmation. This confirmation also applies to requests to quit
+ACM: the entire application (all OS windows, via the quit action).

+ACM: +AH0AfQB9

+ACM: Tab bar +AHsAewB7

tab+AF8-bar+AF8-edge top

+ACM: Which edge to show the tab bar on, top or bottom

+ACM tab+AF8-bar+AF8-margin+AF8-width 0.0

+ACM: The margin to the left and right of the tab bar (in pts)

tab+AF8-bar+AF8-style separator

+ACM: The tab bar style, can be one of: fade, separator, powerline, or
+ACM: hidden. In the fade style, each tab's edges fade into the
+ACM: background color, in the separator style, tabs are separated by a
+ACM: configurable separator, and the powerline shows the tabs as a
+ACM: continuous line. If you use the hidden style, you might want to
+ACM: create a mapping for the select+AF8-tab action which presents you with
+ACM: a list of tabs and allows for easy switching to a tab.

tab+AF8-bar+AF8-min+AF8-tabs 2

+ACM: The minimum number of tabs that must exist before the tab bar is
+ACM: shown

+ACM tab+AF8-switch+AF8-strategy previous

+ACM: The algorithm to use when switching to a tab when the current tab
+ACM: is closed. The default of previous will switch to the last used
+ACM: tab. A value of left will switch to the tab to the left of the
+ACM: closed tab. A value of right will switch to the tab to the right of
+ACM: the closed tab. A value of last will switch to the right-most tab.

+ACM tab+AF8-fade 0.25 0.5 0.75 1

+ACM: Control how each tab fades into the background when using fade for
+ACM: the tab+AF8-bar+AF8-style. Each number is an alpha (between zero and one)
+ACM: that controls how much the corresponding cell fades into the
+ACM: background, with zero being no fade and one being full fade. You
+ACM: can change the number of cells used by adding/removing entries to
+ACM: this list.

tab+AF8-separator +ACI / +ACI

+ACM: The separator between tabs in the tab bar when using separator as
+ACM: the tab+AF8-bar+AF8-style.

+ACM tab+AF8-activity+AF8-symbol none

+ACM: Some text or a unicode symbol to show on the tab if a window in the
+ACM: tab that does not have focus has some activity.

+ACM tab+AF8-title+AF8-template +ACIAew-title+AH0AIg

+ACM: A template to render the tab title. The default just renders the
+ACM: title. If you wish to include the tab-index as well, use something
+ACM: like: +AHs-index+AH0: +AHs-title+AH0. Useful if you have shortcuts mapped for
+ACM: goto+AF8-tab N. In addition you can use +AHs-layout+AF8-name+AH0 for the current
+ACM: layout name and +AHs-num+AF8-windows+AH0 for the number of windows in the tab.
+ACM: Note that formatting is done by Python's string formatting
+ACM: machinery, so you can use, for instance, +AHs-layout+AF8-name+AFs:2+AF0.upper()+AH0
+ACM: to show only the first two letters of the layout name, upper-cased.
+ACM: If you want to style the text, you can use styling directives, for
+ACM: example: +AHs-fmt.fg.red+AH0-red+AHs-fmt.fg.default+AH0-normal+AHs-fmt.bg.+AF8-00FF00+AH0-green
+ACM: bg+AHs-fmt.bg.normal+AH0. Similarly, for bold and italic:
+ACM: +AHs-fmt.bold+AH0-bold+AHs-fmt.nobold+AH0-normal+AHs-fmt.italic+AH0-italic+AHs-fmt.noitalic+AH0.

+ACM active+AF8-tab+AF8-title+AF8-template none

+ACM: Template to use for active tabs, if not specified falls back to
+ACM: tab+AF8-title+AF8-template.

+ACM active+AF8-tab+AF8-foreground   +ACM-000
+ACM active+AF8-tab+AF8-background   +ACM-eee
+ACM active+AF8-tab+AF8-font+AF8-style   bold-italic
+ACM inactive+AF8-tab+AF8-foreground +ACM-444
+ACM inactive+AF8-tab+AF8-background +ACM-999
+ACM inactive+AF8-tab+AF8-font+AF8-style normal

+ACM: Tab bar colors and styles

+ACM tab+AF8-bar+AF8-background none

+ACM: Background color for the tab bar. Defaults to using the terminal
+ACM: background color.

+ACM: +AH0AfQB9

+ACM: Color scheme +AHsAewB7

include ./auri+AF8-theme.conf

+ACM: +AH0AfQB9

+ACM: Advanced +AHsAewB7

+ACM shell .

+ACM: The shell program to execute. The default value of . means to use
+ACM: whatever shell is set as the default shell for the current user.
+ACM: Note that on macOS if you change this, you might need to add
+ACM: --login to ensure that the shell starts in interactive mode and
+ACM: reads its startup rc files.

+ACM editor .

+ACM: The console editor to use when editing the kitty config file or
+ACM: similar tasks. A value of . means to use the environment variables
+ACM: VISUAL and EDITOR in that order. Note that this environment
+ACM: variable has to be set not just in your shell startup scripts but
+ACM: system-wide, otherwise kitty will not see it.

+ACM close+AF8-on+AF8-child+AF8-death no

+ACM: Close the window when the child process (shell) exits. If no (the
+ACM: default), the terminal will remain open when the child exits as
+ACM: long as there are still processes outputting to the terminal (for
+ACM: example disowned or backgrounded processes). If yes, the window
+ACM: will close as soon as the child process exits. Note that setting it
+ACM: to yes means that any background processes still using the terminal
+ACM: can fail silently because their stdout/stderr/stdin no longer work.

+ACM allow+AF8-remote+AF8-control no

+ACM: Allow other programs to control kitty. If you turn this on other
+ACM: programs can control all aspects of kitty, including sending text
+ACM: to kitty windows, opening new windows, closing windows, reading the
+ACM: content of windows, etc.  Note that this even works over ssh
+ACM: connections. You can chose to either allow any program running
+ACM: within kitty to control it, with yes or only programs that connect
+ACM: to the socket specified with the kitty --listen-on command line
+ACM: option, if you use the value socket-only. The latter is useful if
+ACM: you want to prevent programs running on a remote computer over ssh
+ACM: from controlling kitty.

+ACM listen+AF8-on none

+ACM: Tell kitty to listen to the specified unix/tcp socket for remote
+ACM: control connections. Note that this will apply to all kitty
+ACM: instances. It can be overridden by the kitty --listen-on command
+ACM: line flag. This option accepts only UNIX sockets, such as
+ACM: unix:+ACQAew-TEMP+AH0-/mykitty or (on Linux) unix:+AEA-mykitty. Environment
+ACM: variables are expanded. If +AHs-kitty+AF8-pid+AH0 is present then it is
+ACM: replaced by the PID of the kitty process, otherwise the PID of the
+ACM: kitty process is appended to the value, with a hyphen. This option
+ACM: is ignored unless you also set allow+AF8-remote+AF8-control to enable
+ACM: remote control. See the help for kitty --listen-on for more
+ACM: details.

+ACM env 

+ACM: Specify environment variables to set in all child processes. Note
+ACM: that environment variables are expanded recursively, so if you
+ACM: use::

+ACM:     env MYVAR1+AD0-a
+ACM:     env MYVAR2+AD0AJAB7-MYVAR1+AH0-/+ACQAew-HOME+AH0-/b

+ACM: The value of MYVAR2 will be a/+ADw-path to home directory+AD4-/b.

+ACM update+AF8-check+AF8-interval 24

+ACM: Periodically check if an update to kitty is available. If an update
+ACM: is found a system notification is displayed informing you of the
+ACM: available update. The default is to check every 24 hrs, set to zero
+ACM: to disable.

+ACM startup+AF8-session none

+ACM: Path to a session file to use for all kitty instances. Can be
+ACM: overridden by using the kitty --session command line option for
+ACM: individual instances. See
+ACM: https://sw.kovidgoyal.net/kitty/index.html+ACM-sessions in the kitty
+ACM: documentation for details. Note that relative paths are interpreted
+ACM: with respect to the kitty config directory. Environment variables
+ACM: in the path are expanded.

+ACM clipboard+AF8-control write-clipboard write-primary

+ACM: Allow programs running in kitty to read and write from the
+ACM: clipboard. You can control exactly which actions are allowed. The
+ACM: set of possible actions is: write-clipboard read-clipboard write-
+ACM: primary read-primary. You can additionally specify no-append to
+ACM: disable kitty's protocol extension for clipboard concatenation. The
+ACM: default is to allow writing to the clipboard and primary selection
+ACM: with concatenation enabled. Note that enabling the read
+ACM: functionality is a security risk as it means that any program, even
+ACM: one running on a remote server via SSH can read your clipboard.

+ACM allow+AF8-hyperlinks yes

shell+AF8-integration enabled

+ACM: Process hyperlink (OSC 8) escape sequences. If disabled OSC 8
+ACM: escape sequences are ignored. Otherwise they become clickable
+ACM: links, that you can click by holding down ctrl+-shift and clicking
+ACM: with the mouse. The special value of +AGAAYA-ask+AGAAYA means that kitty will
+ACM: ask before opening the link.

+ACM term xterm-kitty

+ACM: The value of the TERM environment variable to set. Changing this
+ACM: can break many terminal programs, only change it if you know what
+ACM: you are doing, not because you read some advice on Stack Overflow
+ACM: to change it. The TERM variable is used by various programs to get
+ACM: information about the capabilities and behavior of the terminal. If
+ACM: you change it, depending on what programs you run, and how
+ACM: different the terminal you are changing it to is, various things
+ACM: from key-presses, to colors, to various advanced features may not
+ACM: work.

+ACM: +AH0AfQB9

+ACM: OS specific tweaks +AHsAewB7

+ACM macos+AF8-titlebar+AF8-color system

+ACM: Change the color of the kitty window's titlebar on macOS. A value
+ACM: of system means to use the default system color, a value of
+ACM: background means to use the background color of the currently
+ACM: active window and finally you can use an arbitrary color, such as
+ACM: +ACM-12af59 or red. WARNING: This option works by using a hack, as
+ACM: there is no proper Cocoa API for it. It sets the background color
+ACM: of the entire window and makes the titlebar transparent. As such it
+ACM: is incompatible with background+AF8-opacity. If you want to use both,
+ACM: you are probably better off just hiding the titlebar with
+ACM: hide+AF8-window+AF8-decorations.

+ACM macos+AF8-option+AF8-as+AF8-alt no

+ACM: Use the option key as an alt key. With this set to no, kitty will
+ACM: use the macOS native Option+-Key +AD0 unicode character behavior. This
+ACM: will break any Alt+-key keyboard shortcuts in your terminal
+ACM: programs, but you can use the macOS unicode input technique. You
+ACM: can use the values: left, right, or both to use only the left,
+ACM: right or both Option keys as Alt, instead.

+ACM macos+AF8-hide+AF8-from+AF8-tasks no

+ACM: Hide the kitty window from running tasks (Option+-Tab) on macOS.

+ACM macos+AF8-quit+AF8-when+AF8-last+AF8-window+AF8-closed no

+ACM: Have kitty quit when all the top-level windows are closed. By
+ACM: default, kitty will stay running, even with no open windows, as is
+ACM: the expected behavior on macOS.

+ACM macos+AF8-window+AF8-resizable yes

+ACM: Disable this if you want kitty top-level (OS) windows to not be
+ACM: resizable on macOS.

+ACM macos+AF8-thicken+AF8-font 0

+ACM: Draw an extra border around the font with the given width, to
+ACM: increase legibility at small font sizes. For example, a value of
+ACM: 0.75 will result in rendering that looks similar to sub-pixel
+ACM: antialiasing at common font sizes.

+ACM macos+AF8-traditional+AF8-fullscreen no

+ACM: Use the traditional full-screen transition, that is faster, but
+ACM: less pretty.

+ACM macos+AF8-show+AF8-window+AF8-title+AF8-in all

+ACM: Show or hide the window title in the macOS window or menu-bar. A
+ACM: value of window will show the title of the currently active window
+ACM: at the top of the macOS window. A value of menubar will show the
+ACM: title of the currently active window in the macOS menu-bar, making
+ACM: use of otherwise wasted space. all will show the title everywhere
+ACM: and none hides the title in the window and the menu-bar.

+ACM macos+AF8-custom+AF8-beam+AF8-cursor no

+ACM: Enable/disable custom mouse cursor for macOS that is easier to see
+ACM: on both light and dark backgrounds. WARNING: this might make your
+ACM: mouse cursor invisible on dual GPU machines.

+ACM linux+AF8-display+AF8-server auto

+ACM: Choose between Wayland and X11 backends. By default, an appropriate
+ACM: backend based on the system state is chosen automatically. Set it
+ACM: to x11 or wayland to force the choice.

+ACM: +AH0AfQB9

+ACM: Keyboard shortcuts +AHsAewB7

+ACM: For a list of key names, see: the GLFW key macros
+ACM: +ADw-https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h+ACM-L349+AD4.
+ACM: The name to use is the part after the GLFW+AF8-KEY+AF8 prefix. For a list
+ACM: of modifier names, see: GLFW mods
+ACM: +ADw-https://www.glfw.org/docs/latest/group+AF8AXw-mods.html+AD4

+ACM: On Linux you can also use XKB key names to bind keys that are not
+ACM: supported by GLFW. See XKB keys
+ACM: +ADw-https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
+ACM: keysyms.h+AD4 for a list of key names. The name to use is the part
+ACM: after the XKB+AF8-KEY+AF8 prefix. Note that you can only use an XKB key
+ACM: name for keys that are not known as GLFW keys.

+ACM: Finally, you can use raw system key codes to map keys, again only
+ACM: for keys that are not known as GLFW keys. To see the system key
+ACM: code for a key, start kitty with the kitty --debug-keyboard option.
+ACM: Then kitty will output some debug text for every key event. In that
+ACM: text look for +AGAAYA-native+AF8-code+AGAAYA the value of that becomes the key
+ACM: name in the shortcut. For example:

+ACM: .. code-block:: none

+ACM:     on+AF8-key+AF8-input: glfw key: 65 native+AF8-code: 0x61 action: PRESS mods: 0x0 text: 'a'

+ACM: Here, the key name for the A key is 0x61 and you can use it with::

+ACM:     map ctrl+-0x61 something

+ACM: to map ctrl+-a to something.

+ACM: You can use the special action no+AF8-op to unmap a keyboard shortcut
+ACM: that is assigned in the default configuration::

+ACM:     map kitty+AF8-mod+-space no+AF8-op

+ACM: You can combine multiple actions to be triggered by a single
+ACM: shortcut, using the syntax below::

+ACM:     map key combine +ADw-separator+AD4 action1 +ADw-separator+AD4 action2 +ADw-separator+AD4 action3 ...

+ACM: For example::

+ACM:     map kitty+AF8-mod+-e combine : new+AF8-window : next+AF8-layout

+ACM: this will create a new window and switch to the next available
+ACM: layout

+ACM: You can use multi-key shortcuts using the syntax shown below::

+ACM:     map key1+AD4-key2+AD4-key3 action

+ACM: For example::

+ACM:     map ctrl+-f+AD4-2 set+AF8-font+AF8-size 20

+ACM kitty+AF8-mod ctrl+-shift

+ACM: The value of kitty+AF8-mod is used as the modifier for all default
+ACM: shortcuts, you can change it in your kitty.conf to change the
+ACM: modifiers for all the default shortcuts.

+ACM clear+AF8-all+AF8-shortcuts no

+ACM: You can have kitty remove all shortcut definition seen up to this
+ACM: point. Useful, for instance, to remove the default shortcuts.

+ACM kitten+AF8-alias hints hints --hints-offset+AD0-0

+ACM: You can create aliases for kitten names, this allows overriding the
+ACM: defaults for kitten options and can also be used to shorten
+ACM: repeated mappings of the same kitten with a specific group of
+ACM: options. For example, the above alias changes the default value of
+ACM: kitty +-kitten hints --hints-offset to zero for all mappings,
+ACM: including the builtin ones.

+ACM: Clipboard +AHsAewB7

+ACM map kitty+AF8-mod+-c copy+AF8-to+AF8-clipboard

+ACM: There is also a copy+AF8-or+AF8-interrupt action that can be optionally
+ACM: mapped to Ctrl+-c. It will copy only if there is a selection and
+ACM: send an interrupt otherwise. Similarly, copy+AF8-and+AF8-clear+AF8-or+AF8-interrupt
+ACM: will copy and clear the selection or send an interrupt if there is
+ACM: no selection.

+ACM map kitty+AF8-mod+-v  paste+AF8-from+AF8-clipboard
+ACM map kitty+AF8-mod+-s  paste+AF8-from+AF8-selection
+ACM map shift+-insert paste+AF8-from+AF8-selection
+ACM map kitty+AF8-mod+-o  pass+AF8-selection+AF8-to+AF8-program

+ACM: You can also pass the contents of the current selection to any
+ACM: program using pass+AF8-selection+AF8-to+AF8-program. By default, the system's
+ACM: open program is used, but you can specify your own, the selection
+ACM: will be passed as a command line argument to the program, for
+ACM: example::

+ACM:     map kitty+AF8-mod+-o pass+AF8-selection+AF8-to+AF8-program firefox

+ACM: You can pass the current selection to a terminal program running in
+ACM: a new kitty window, by using the +AEA-selection placeholder::

+ACM:     map kitty+AF8-mod+-y new+AF8-window less +AEA-selection

+ACM: +AH0AfQB9

+ACM: Scrolling +AHsAewB7

+ACM map kitty+AF8-mod+-up        scroll+AF8-line+AF8-up
+ACM map kitty+AF8-mod+-k         scroll+AF8-line+AF8-up
+ACM map kitty+AF8-mod+-down      scroll+AF8-line+AF8-down
+ACM map kitty+AF8-mod+-j         scroll+AF8-line+AF8-down
+ACM map kitty+AF8-mod+-page+AF8-up   scroll+AF8-page+AF8-up
map kitty+AF8-mod+-u   scroll+AF8-page+AF8-up
+ACM map kitty+AF8-mod+-page+AF8-down scroll+AF8-page+AF8-down
map kitty+AF8-mod+-d scroll+AF8-page+AF8-down
+ACM map kitty+AF8-mod+-home      scroll+AF8-home
+ACM map kitty+AF8-mod+-end       scroll+AF8-end
+ACM map kitty+AF8-mod+-h         show+AF8-scrollback

+ACM: You can pipe the contents of the current screen +- history buffer as
+ACM: STDIN to an arbitrary program using the +AGAAYA-launch+AGAAYA function. For
+ACM: example, the following opens the scrollback buffer in less in an
+ACM: overlay window::

+ACM:     map f1 launch --stdin-source+AD0AQA-screen+AF8-scrollback --stdin-add-formatting --type+AD0-overlay less +-G -R

+ACM: For more details on piping screen and buffer contents to external
+ACM: programs, see launch.

+ACM: +AH0AfQB9

+ACM: Window management +AHsAewB7

+ACM map kitty+AF8-mod+-enter new+AF8-window

+ACM: You can open a new window running an arbitrary program, for
+ACM: example::

+ACM:     map kitty+AF8-mod+-y      launch mutt

+ACM: You can open a new window with the current working directory set to
+ACM: the working directory of the current window using::

+ACM:     map ctrl+-alt+-enter    launch --cwd+AD0-current

+ACM: You can open a new window that is allowed to control kitty via the
+ACM: kitty remote control facility by prefixing the command line with +AEA.
+ACM: Any programs running in that window will be allowed to control
+ACM: kitty. For example::

+ACM:     map ctrl+-enter launch --allow-remote-control some+AF8-program

+ACM: You can open a new window next to the currently active window or as
+ACM: the first window, with::

+ACM:     map ctrl+-n launch --location+AD0-neighbor some+AF8-program
+ACM:     map ctrl+-f launch --location+AD0-first some+AF8-program

+ACM: For more details, see launch.

+ACM map kitty+AF8-mod+-n new+AF8-os+AF8-window

+ACM: Works like new+AF8-window above, except that it opens a top level OS
+ACM: kitty window. In particular you can use new+AF8-os+AF8-window+AF8-with+AF8-cwd to
+ACM: open a window with the current working directory.

+ACM map kitty+AF8-mod+-w close+AF8-window
+ACM map kitty+AF8-mod+-+AF0 next+AF8-window
+ACM map kitty+AF8-mod+-+AFs previous+AF8-window
+ACM map kitty+AF8-mod+-f move+AF8-window+AF8-forward
+ACM map kitty+AF8-mod+-b move+AF8-window+AF8-backward
+ACM map kitty+AF8-mod+-+AGA move+AF8-window+AF8-to+AF8-top
+ACM map kitty+AF8-mod+-r start+AF8-resizing+AF8-window
+ACM map kitty+AF8-mod+-1 first+AF8-window
+ACM map kitty+AF8-mod+-2 second+AF8-window
+ACM map kitty+AF8-mod+-3 third+AF8-window
+ACM map kitty+AF8-mod+-4 fourth+AF8-window
+ACM map kitty+AF8-mod+-5 fifth+AF8-window
+ACM map kitty+AF8-mod+-6 sixth+AF8-window
+ACM map kitty+AF8-mod+-7 seventh+AF8-window
+ACM map kitty+AF8-mod+-8 eighth+AF8-window
+ACM map kitty+AF8-mod+-9 ninth+AF8-window
+ACM map kitty+AF8-mod+-0 tenth+AF8-window
+ACM: +AH0AfQB9

+ACM: Tab management +AHsAewB7

+ACM map kitty+AF8-mod+-right next+AF8-tab
+ACM map kitty+AF8-mod+-left  previous+AF8-tab
+ACM map kitty+AF8-mod+-t     new+AF8-tab
+ACM map kitty+AF8-mod+-q     close+AF8-tab
+ACM map kitty+AF8-mod+-.     move+AF8-tab+AF8-forward
+ACM map kitty+AF8-mod+-,     move+AF8-tab+AF8-backward
+ACM map kitty+AF8-mod+-alt+-t set+AF8-tab+AF8-title

+ACM: You can also create shortcuts to go to specific tabs, with 1 being
+ACM: the first tab, 2 the second tab and -1 being the previously active
+ACM: tab, and any number larger than the last tab being the last tab::

+ACM:     map ctrl+-alt+-1 goto+AF8-tab 1
+ACM:     map ctrl+-alt+-2 goto+AF8-tab 2

+ACM: Just as with new+AF8-window above, you can also pass the name of
+ACM: arbitrary commands to run when using new+AF8-tab and use
+ACM: new+AF8-tab+AF8-with+AF8-cwd. Finally, if you want the new tab to open next to
+ACM: the current tab rather than at the end of the tabs list, use::

+ACM:     map ctrl+-t new+AF8-tab +ACE-neighbor +AFs-optional cmd to run+AF0
+ACM: +AH0AfQB9

+ACM: Layout management +AHsAewB7

+ACM map kitty+AF8-mod+-l next+AF8-layout

+ACM: You can also create shortcuts to switch to specific layouts::

+ACM:     map ctrl+-alt+-t goto+AF8-layout tall
+ACM:     map ctrl+-alt+-s goto+AF8-layout stack

+ACM: Similarly, to switch back to the previous layout::

+ACM:    map ctrl+-alt+-p last+AF8-used+AF8-layout
+ACM: +AH0AfQB9

+ACM: Font sizes +AHsAewB7

+ACM: You can change the font size for all top-level kitty OS windows at
+ACM: a time or only the current one.

+ACM map kitty+AF8-mod+-equal     change+AF8-font+AF8-size all +-2.0
+ACM map kitty+AF8-mod+-minus     change+AF8-font+AF8-size all -2.0
+ACM map kitty+AF8-mod+-backspace change+AF8-font+AF8-size all 0

+ACM: To setup shortcuts for specific font sizes::

+ACM:     map kitty+AF8-mod+-f6 change+AF8-font+AF8-size all 10.0

+ACM: To setup shortcuts to change only the current OS window's font
+ACM: size::

+ACM:     map kitty+AF8-mod+-f6 change+AF8-font+AF8-size current 10.0
+ACM: +AH0AfQB9

+ACM: Select and act on visible text +AHsAewB7

+ACM: Use the hints kitten to select text and either pass it to an
+ACM: external program or insert it into the terminal or copy it to the
+ACM: clipboard.

+ACM map kitty+AF8-mod+-e kitten hints

+ACM: Open a currently visible URL using the keyboard. The program used
+ACM: to open the URL is specified in open+AF8-url+AF8-with.

+ACM map kitty+AF8-mod+-p+AD4-f kitten hints --type path --program -

+ACM: Select a path/filename and insert it into the terminal. Useful, for
+ACM: instance to run git commands on a filename output from a previous
+ACM: git command.

+ACM map kitty+AF8-mod+-p+AD4-shift+-f kitten hints --type path

+ACM: Select a path/filename and open it with the default open program.

+ACM map kitty+AF8-mod+-p+AD4-l kitten hints --type line --program -

+ACM: Select a line of text and insert it into the terminal. Use for the
+ACM: output of things like: ls -1

+ACM map kitty+AF8-mod+-p+AD4-w kitten hints --type word --program -

+ACM: Select words and insert into terminal.

+ACM map kitty+AF8-mod+-p+AD4-h kitten hints --type hash --program -

+ACM: Select something that looks like a hash and insert it into the
+ACM: terminal. Useful with git, which uses sha1 hashes to identify
+ACM: commits

+ACM map kitty+AF8-mod+-p+AD4-n kitten hints --type linenum

+ACM: Select something that looks like filename:linenum and open it in
+ACM: vim at the specified line number.

+ACM map kitty+AF8-mod+-p+AD4-y kitten hints --type hyperlink

+ACM: Select a hyperlink (i.e. a URL that has been marked as such by the
+ACM: terminal program, for example, by ls --hyperlink+AD0-auto).


+ACM: The hints kitten has many more modes of operation that you can map
+ACM: to different shortcuts. For a full description see kittens/hints.
+ACM: +AH0AfQB9

+ACM: Miscellaneous +AHsAewB7

+ACM map kitty+AF8-mod+-f11    toggle+AF8-fullscreen
+ACM map kitty+AF8-mod+-f10    toggle+AF8-maximized
+ACM map kitty+AF8-mod+-u      kitten unicode+AF8-input
+ACM map kitty+AF8-mod+-f2     edit+AF8-config+AF8-file
+ACM map kitty+AF8-mod+-escape kitty+AF8-shell window

+ACM: Open the kitty shell in a new window/tab/overlay/os+AF8-window to
+ACM: control kitty using commands.

+ACM map kitty+AF8-mod+-a+AD4-m    set+AF8-background+AF8-opacity +-0.1
+ACM map kitty+AF8-mod+-a+AD4-l    set+AF8-background+AF8-opacity -0.1
+ACM map kitty+AF8-mod+-a+AD4-1    set+AF8-background+AF8-opacity 1
+ACM map kitty+AF8-mod+-a+AD4-d    set+AF8-background+AF8-opacity default
+ACM map kitty+AF8-mod+-delete clear+AF8-terminal reset active

+ACM: You can create shortcuts to clear/reset the terminal. For example::

+ACM:     +ACM Reset the terminal
+ACM:     map kitty+AF8-mod+-f9 clear+AF8-terminal reset active
+ACM:     +ACM Clear the terminal screen by erasing all contents
+ACM:     map kitty+AF8-mod+-f10 clear+AF8-terminal clear active
+ACM:     +ACM Clear the terminal scrollback by erasing it
+ACM:     map kitty+AF8-mod+-f11 clear+AF8-terminal scrollback active
+ACM:     +ACM Scroll the contents of the screen into the scrollback
+ACM:     map kitty+AF8-mod+-f12 clear+AF8-terminal scroll active

+ACM: If you want to operate on all windows instead of just the current
+ACM: one, use all instead of active.

+ACM: It is also possible to remap Ctrl+-L to both scroll the current
+ACM: screen contents into the scrollback buffer and clear the screen,
+ACM: instead of just clearing the screen::

+ACM:     map ctrl+-l combine : clear+AF8-terminal scroll active : send+AF8-text normal,application +AFw-x0c


+ACM: You can tell kitty to send arbitrary (UTF-8) encoded text to the
+ACM: client program when pressing specified shortcut keys. For example::

+ACM:     map ctrl+-alt+-a send+AF8-text all Special text

+ACM: This will send +ACI-Special text+ACI when you press the ctrl+-alt+-a key
+ACM: combination.  The text to be sent is a python string literal so you
+ACM: can use escapes like +AFw-x1b to send control codes or +AFw-u21fb to send
+ACM: unicode characters (or you can just input the unicode characters
+ACM: directly as UTF-8 text). The first argument to send+AF8-text is the
+ACM: keyboard modes in which to activate the shortcut. The possible
+ACM: values are normal or application or kitty or a comma separated
+ACM: combination of them.  The special keyword all means all modes. The
+ACM: modes normal and application refer to the DECCKM cursor key mode
+ACM: for terminals, and kitty refers to the special kitty extended
+ACM: keyboard protocol.

+ACM: Another example, that outputs a word and then moves the cursor to
+ACM: the start of the line (same as pressing the Home key)::

+ACM:     map ctrl+-alt+-a send+AF8-text normal Word+AFw-x1b+AFs-H
+ACM:     map ctrl+-alt+-a send+AF8-text application Word+AFw-x1bOH

+ACM: +AH0AfQB9

+ACM +AH0AfQB9


+ACM BEGIN+AF8-KITTY+AF8-THEME
+ACM Jellybeans
+ACM include current-theme.conf
+ACM END+AF8-KITTY+AF8-THEME
